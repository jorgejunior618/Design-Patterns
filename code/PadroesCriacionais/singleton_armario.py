# -*- coding: utf-8 -*-
"""Singleton.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UKTSIk8bhb55Ga_ovUMMEzLH1rZk3pEK
"""

# Vantagens:
#   Acesso controlado à instancia
#   Instância criada somente no momento que for utiliza-la
#   Substitui variáveis globais

# Desvantagens:
#   Acumula a responsabilidade em uma unica instancia
#   requer cuidados adicionais para tratar concorrencia

class ArmarioSingleton:
  __instancia = None  # instância única do armário

  def __init__(self):
    '''
    Construtor teoricamente privado
    '''
    
    # Como não é possivel privar o construtor em Python, é verificado se
    # ja não existe uma instância ao tentar usar o construtor
    if ArmarioSingleton.__instancia is not None:
      raise Exception(
        "O armário já foi criado! Use ArmarioSingleton.getInstance() para obte-lo"
      )
    ArmarioSingleton.__instancia = self

    self.ferramentas = {}
    self.pecas = {}

  @staticmethod
  def getInstance():
    if ArmarioSingleton.__instancia is None:
      ArmarioSingleton()
    return ArmarioSingleton.__instancia

  def adicionarFerramenta(self, nome: str, qtd: int):
    '''
    Adiciona a quantidade informada da ferramenta ao armário
    Se ainda não houver a ferramenta em questão, ela é adicionada
    Se ja houver, sua quantidade é acrescida
    '''
    if(nome not in self.ferramentas):
      self.ferramentas[nome] = qtd
    else:
      self.ferramentas[nome] += qtd
  
  def adicionarPeca(self, nome: str, qtd: int):
    '''
    Adiciona a quantidade informada da peça ao armário
    Se ainda não houver a peça em questão, ela é adicionada
    Se ja houver, sua quantidade é acrescida
    '''
    if(nome not in self.pecas):
      self.pecas[nome] = qtd
    else:
      self.pecas[nome] += qtd

  def removerFerramenta(self, nome: str, qtd: int):
    '''
    Remove a quantidade informada da ferramenta ao armário
    Se ainda não houver a ferramenta em questão, um erro é mostrado
    Se ja houver, e sua quantidade for menor que a pedida, um erro é mostrado
    Se ja houver, e sua quantidade for maior ou igual que a pedida, a quantidade e diminuída
    '''
    retorno = {}
    if (nome not in self.ferramentas):
      print('Você ainda não tem essa Ferramenta')
      return {nome: 0}
    elif (qtd > self.ferramentas[nome]):
      print('Você não tem Ferramentas o suficiente')
      return {nome: 0}
    else:
      self.ferramentas[nome] -= qtd
      return {nome: qtd}
  
  def removerPeca(self, nome: str, qtd: int):
    '''
    Remove a quantidade informada da peça ao armário
    Se ainda não houver a peça em questão, um erro é mostrado
    Se ja houver, e sua quantidade for menor que a pedida, um erro é mostrado
    Se ja houver, e sua quantidade for maior ou igual que a pedida, a quantidade e diminuída
    '''
    if (nome not in self.pecas):
      print('Você ainda não tem essa Peça')
      return {nome: 0}
    elif (qtd > self.pecas[nome]):
      print('Você não tem Peças o suficiente')
      return {nome: 0}
    else:
      self.pecas[nome] -= qtd
      return {nome: qtd}
  
  def __str__(self):
    return f"Seu armário contem:\n  Ferramentas: {self.ferramentas},\n  Pecas: {self.pecas},"

if __name__ == "__main__":
  print("Gerando a instancia do armário")
  armario = ArmarioSingleton.getInstance()
  print(armario)

  print("\nTentando Instanciar outro armario")
  try:
    armario2 = ArmarioSingleton()
  except Exception as e:
    print(str(e))

  print("\nAdicionando ferramentas ao armário")
  armario.adicionarFerramenta('ChaveFenda', 10)
  armario.adicionarFerramenta('Chave Philips', 15)
  print(armario)

  print("\nGerando um auxiliar com o getInstance, e adicionando 2 peças")
  auxiliar = ArmarioSingleton.getInstance()
  auxiliar.adicionarPeca('Parafuso', 10)
  auxiliar.adicionarPeca('Porca', 15)
  print("\nVerificando se as adições do auxiliar foram realmente na instância única")
  print(armario)
  
  print("\nRemovendo ferramentas do armario")
  print(f"{auxiliar.removerPeca('Parafuso', 5)}")
  print(armario)

  print("\nRemovendo mais ferramentas que as contidas no armario")
  print(f"{auxiliar.removerPeca('Porca', 20)}")
  print(armario)

  print(f"armario is auxiliar: {armario is auxiliar}")